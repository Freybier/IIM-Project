/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import iim.Handtuch.Leading;
import iim.Hochschule.Dozent;
import iim.Hochschule.LV;
import iim.Hochschule.Zug;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import java.nio.file.*;
import java.util.stream.*;

/**
 *
 * @author altai
 */
public class Export extends javax.swing.JFrame {

    private List<LV> lvList;
    private List<Dozent> dozList;
    private List<Zug> zugList;
    private List<Leading> leadingList;
    
    /**
     * Creates new form Export
     */
    public Export(List<LV> lvList, List<Dozent> dozList, List<Zug> zugList, List<Leading> leadingList) {
        initComponents();
        setVisible(true);
        this.lvList = lvList;
        this.dozList = dozList;
        this.zugList = zugList;
        this.leadingList = leadingList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Dateiname:");

        jButton1.setText("Speichern");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Laden");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        String name = jTextField1.getText();
        speichern(name);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = jTextField1.getText();
        speichern(name);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.lvList = ladenLV();
        this.dozList = ladenDOZ();
        this.zugList = ladenZUG();
        this.leadingList = ladenLEAD();
        System.out.println(lvList);
        System.out.println(dozList);
        System.out.println(zugList);
        System.out.println(leadingList);
    }//GEN-LAST:event_jButton2ActionPerformed

    public void speichern(String name) {
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Data/" + name + "LV.ser"));
            for (LV i : lvList) {
                out.writeObject(i);
            } 
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Data/" + name + "DOZ.ser"));
            for (Dozent i : dozList) {
                out.writeObject(i);
            } 
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Data/" + name + "ZUG.ser"));
            for (Zug i : zugList) {
                out.writeObject(i);
            } 
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("Data/" + name + "LEAD.ser"));
            for (Leading i : leadingList) {
                out.writeObject(i);
            } 
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public List<LV> ladenLV() {
        List<LV> geladeneLVList = new ArrayList<>();

        String directoryPath = "Data/";
        try (Stream<Path> files = Files.list(Paths.get(directoryPath))) {
            files.filter(path -> path.toString().endsWith("LV.ser"))
                 .forEach(path -> {
                     try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(path.toFile()))) {
                        while (true) {
                            try {
                                LV lv = (LV) in.readObject();
                                geladeneLVList.add(lv);
                            } catch (EOFException e) {
                                // EOFException signalisiert das Ende der Datei
                                break;
                            }
                        }
                     } catch (IOException | ClassNotFoundException e) {
                         e.printStackTrace();
                     }
                 });
        } catch (IOException e) {
            e.printStackTrace();
        }

        return geladeneLVList;
    }
    
    public List<Dozent> ladenDOZ() {
        List<Dozent> geladeneDOZList = new ArrayList<>();

        String directoryPath = "Data/";
        try (Stream<Path> files = Files.list(Paths.get(directoryPath))) {
            files.filter(path -> path.toString().endsWith("DOZ.ser"))
                 .forEach(path -> {
                     try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(path.toFile()))) {
                        while (true) {
                            try {
                                Dozent doz = (Dozent) in.readObject();
                                geladeneDOZList.add(doz);
                            } catch (EOFException e) {
                                // EOFException signalisiert das Ende der Datei
                                break;
                            }
                        }
                     } catch (IOException | ClassNotFoundException e) {
                         e.printStackTrace();
                     }
                 });
        } catch (IOException e) {
            e.printStackTrace();
        }

        return geladeneDOZList;
    }

    public List<Zug> ladenZUG() {
        List<Zug> geladeneZUGList = new ArrayList<>();

        String directoryPath = "Data/";
        try (Stream<Path> files = Files.list(Paths.get(directoryPath))) {
            files.filter(path -> path.toString().endsWith("ZUG.ser"))
                 .forEach(path -> {
                     try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(path.toFile()))) {
                        while (true) {
                            try {
                                Zug zug = (Zug) in.readObject();
                                geladeneZUGList.add(zug);
                            } catch (EOFException e) {
                                // EOFException signalisiert das Ende der Datei
                                break;
                            }
                        }
                     } catch (IOException | ClassNotFoundException e) {
                         e.printStackTrace();
                     }
                 });
        } catch (IOException e) {
            e.printStackTrace();
        }

        return geladeneZUGList;
    }
    
    public List<Leading> ladenLEAD() {
        List<Leading> geladeneLEADList = new ArrayList<>();

        String directoryPath = "Data/";
        try (Stream<Path> files = Files.list(Paths.get(directoryPath))) {
            files.filter(path -> path.toString().endsWith("LEAD.ser"))
                 .forEach(path -> {
                     try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(path.toFile()))) {
                        while (true) {
                            try {
                                Leading lead = (Leading) in.readObject();
                                geladeneLEADList.add(lead);
                            } catch (EOFException e) {
                                // EOFException signalisiert das Ende der Datei
                                break;
                            }
                        }
                     } catch (IOException | ClassNotFoundException e) {
                         e.printStackTrace();
                     }
                 });
        } catch (IOException e) {
            e.printStackTrace();
        }

        return geladeneLEADList;
    }
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

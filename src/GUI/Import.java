/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import iim.Hochschule.LV;
import iim.Hochschule.Zug;
import iim.Hochschule.Dozent;
import iim.Handtuch.Leading;
import java.io.EOFException;

/**
 *
 * @author altai
 */
public class Import extends javax.swing.JFrame {

    public File files[];

    /**
     * Creates new form Import
     */
    public Import() {
        initComponents();
        build();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setFileFilter(new MyCustomFilter());
        jFileChooser1.setMultiSelectionEnabled(true);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 986, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed

        try {
            // TODO add your handling code here:
            this.files = jFileChooser1.getSelectedFiles();
            readObjectsFromFiles();
        } catch (IOException ex) {
            Logger.getLogger(Import.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Import.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jFileChooser1ActionPerformed

//    public void readObjectFromFile() throws IOException, ClassNotFoundException {
//        
//        for(File file : files){
//            
//            if(file.toString().contains("LV.ser")){
//                try (FileInputStream fis = new FileInputStream(file);
//                ObjectInputStream ois = new ObjectInputStream(fis)) {
//                List<Object>result = ((List<Object>)ois.readObject());
//                System.out.println(result);
//            }
//            }
//            if(file.toString().contains("DOZ.ser")){
//
//                try (FileInputStream fis = new FileInputStream(file);
//                ObjectInputStream ois = new ObjectInputStream(fis)) {
//                List<Dozent>result = ((List<Dozent>)ois.readObject());
//                System.out.println(result);
//            }
//            }
//            if(file.toString().contains("ZUG.ser")){
//                try (FileInputStream fis = new FileInputStream(file);
//                ObjectInputStream ois = new ObjectInputStream(fis)) {
//                List<Zug> result = ((List<Zug>)ois.readObject());
//                System.out.println(result);
//            }
//            }
//            if(file.toString().contains("LEAD.ser")){
//                try (FileInputStream fis = new FileInputStream(file);
//                ObjectInputStream ois = new ObjectInputStream(fis)) {
//                List<Leading> result = ((List<Leading>)ois.readObject());
//                System.out.println(result);
//            }
//            }
//        }
//    }
    public void readObjectsFromFiles() throws IOException, ClassNotFoundException {
        List<LV> lvList = new ArrayList<>();
        List<Dozent> dozentList = new ArrayList<>();
        List<Zug> zugList = new ArrayList<>();
        List<Leading> leadingList = new ArrayList<>();

        for (File file : files) {
            List<Object> result = new ArrayList<>();
            try (FileInputStream fis = new FileInputStream(file); ObjectInputStream ois = new ObjectInputStream(fis)) {

                while (true) {
                    try {
                        Object obj = ois.readObject();
                        result.add(obj);

                    } catch (EOFException e) {
                        // Reached the end of the file
                        break;
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
            for (Object obj : result) {

                if (obj instanceof LV) {
                    lvList.add((LV) obj);
                } else if (obj instanceof Dozent) {
                    dozentList.add((Dozent) obj);
                    //System.out.println(result);
                } else if (obj instanceof Zug) {
                    zugList.add((Zug) obj);
                } else if (obj instanceof Leading) {
                    leadingList.add((Leading) obj);
                }
            }
        }
        StundenplanFrame gui = new StundenplanFrame(dozentList, zugList, lvList, leadingList);

    }

    class MyCustomFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            System.out.println(file);
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt") || file.getAbsolutePath().endsWith(".csv") || file.getAbsolutePath().endsWith(".ser");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Serialized-object files (*.ser)";
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void build() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Import.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Import.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Import.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Import.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import iim.Hochschule.Dozent;
import iim.Hochschule.LV;
import iim.Hochschule.Zug;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Feizi, Frey
 */
public class MusterPanel extends javax.swing.JPanel {

    public int columnNr = 10;
    public Object[] columnNames;
    public CSVToObjectArrayConverter oArray;
    public JPanel layoutpanel;
    public List<Dozent> dozentenList;
    public List<Zug> zugList;
    public List<LV> lvList;
    public TableTransferHandler tableTransferHandler;
    public Boolean radioButtonZugBoolean;
    public Boolean radioButtonDozentBoolean;
    public TableCellRenderer tableCellRenderer;
    public CustomListCellRenderer listCellRenderer;
    public JTabbedPane jTabbedPane1;
    public Object selectedSearchObject;
    public LV jLVListLV;
    public LV lastSelectedLV;
    public LV lvSelected;

    // Constructor for MusterPanel
    public MusterPanel(List<Dozent> dozentenList, List<Zug> zugList, List<LV> lvList, JTabbedPane jTabbedPane) {
        this.dozentenList = dozentenList;
        this.zugList = zugList;
        this.lvList = lvList;

        this.jTabbedPane1 = jTabbedPane;

        initComponents();
        timeToJTable();
        addSelectionListenerJLVList();

        //sets the header of the table to a specific Font and size
        JTableHeader header = jTable.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 16));

        // makes it possible to drag items from the LV-List to the JTable
        jLVList.setDragEnabled(true);
        jLVList.setTransferHandler(new ListTransferHandler(jLVList));
        this.tableTransferHandler = new TableTransferHandler(jTable, lvList, dozentenList, jLVList);
        jTable.setTransferHandler(tableTransferHandler);
    }

    // method for adding the time to the Table
    private void timeToJTable() {
        List<String> textList = Arrays.asList("8:00", "10:00", "12:00", "14:00", "16:00", "18:00");

        for (int i = 0; i < textList.size(); i++) {
            jTable.setValueAt(textList.get(i), i, 0); // F체gen Sie den Text in die erste Spalte ein
        }
        Dozent dummyDozent = new Dozent("DMY");
        LV dummyLV = new LV("DMY3", "DMY", "DMY", "0", true, "DMY", "DMY1", "DMY2");
        jTable.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer(dummyDozent, dozentenList, lvList, jLabelName.getText(), dummyLV, zugList));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jSuchfeldDoZug = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLVList = new javax.swing.JList<>();
        jLabelName = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sucheList = new javax.swing.JList<>();
        jRadioDozent = new javax.swing.JRadioButton();
        jRadioZug = new javax.swing.JRadioButton();
        jInfoFeld = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jComboDoZug = new javax.swing.JComboBox<>();
        changeRoomButton = new javax.swing.JButton();
        changeRoomField = new javax.swing.JTextField();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jScrollPane1.setViewportView(jTree1);

        jDialog1.setTitle("Error");

        jLabel1.setText("Stellen Sie sicher, dass Sie eine Lenveranstaltung gew채hlt und Sie in der Textzeile eine Raumnummer angegeben haben. ");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSuchfeldDoZug.setText("Suche");
        jSuchfeldDoZug.setToolTipText("SucheDozent/Zug");
        jSuchfeldDoZug.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSuchfeldDoZugFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jSuchfeldDoZugFocusLost(evt);
            }
        });
        jSuchfeldDoZug.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSuchfeldDoZugKeyReleased(evt);
            }
        });

        jLVList.setFont(new java.awt.Font("Consolas", 1, 16)); // NOI18N
        jScrollPane2.setViewportView(jLVList);

        jLabelName.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabelName.setText("Name:");

        sucheList.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        sucheList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sucheListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(sucheList);

        buttonGroup1.add(jRadioDozent);
        jRadioDozent.setText("Dozent*in");
        jRadioDozent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioDozentActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioZug);
        jRadioZug.setText("Zug");
        jRadioZug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioZugActionPerformed(evt);
            }
        });

        jInfoFeld.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPane3ComponentResized(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Time", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable);

        jComboDoZug.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bitte w채hle Dozent oder Zug" }));
        jComboDoZug.setMaximumSize(new java.awt.Dimension(183, 22));
        jComboDoZug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboDoZugActionPerformed(evt);
            }
        });

        changeRoomButton.setText("Raum 채ndern");
        changeRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRoomButtonActionPerformed(evt);
            }
        });

        changeRoomField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRoomFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInfoFeld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jSuchfeldDoZug, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboDoZug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioDozent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioZug, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 500, Short.MAX_VALUE)
                                .addComponent(changeRoomField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(changeRoomButton))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1129, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioZug)
                            .addComponent(jRadioDozent)
                            .addComponent(jComboDoZug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changeRoomButton)
                            .addComponent(changeRoomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabelName))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSuchfeldDoZug, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInfoFeld, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // method for clearing searchbar on click
    private void jSuchfeldDoZugFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSuchfeldDoZugFocusGained
        if (jSuchfeldDoZug.getText().equals("Suche")) {
            jSuchfeldDoZug.setText("");
        }
    }//GEN-LAST:event_jSuchfeldDoZugFocusGained

    // method for filling searchbar with placeholder for aesthetic
    private void jSuchfeldDoZugFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSuchfeldDoZugFocusLost
        // TODO add your handling code here:
        if (jSuchfeldDoZug.getText().isEmpty()) {
            jSuchfeldDoZug.setText("Suche");
        }
    }//GEN-LAST:event_jSuchfeldDoZugFocusLost

    // method for search bar, so after every keypress, he calls the findMatchingObjects method
    private void jSuchfeldDoZugKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSuchfeldDoZugKeyReleased
        String entry = this.jSuchfeldDoZug.getText();
        findMatchingObjects(entry);
    }//GEN-LAST:event_jSuchfeldDoZugKeyReleased

    // action-listener for the click on the elements in the search-result List
    private void sucheListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sucheListMouseClicked
        // clear the List from previous search querys
        jComboDoZug.removeAllItems();
        // switching the flags so it doesnt interfere with the RadioButtons
        radioButtonZugBoolean = false;
        radioButtonDozentBoolean = false;
        // set back radioButtons and update it
        buttonGroup1.clearSelection();

        jRadioDozent.repaint();
        jRadioDozent.revalidate();

        jRadioZug.repaint();
        jRadioZug.revalidate();

        this.selectedSearchObject = sucheList.getSelectedValue();
        if (selectedSearchObject != null) {
            int tabIndex = jTabbedPane1.getSelectedIndex();
            String jLabelText = selectedSearchObject.toString();

            // different if-statements for changing the input of the list, differentiated for each class
            // for Zug and Dozent, the jLVList if filled with the LVs belonging to the Zug or Dozent respectively
            if (selectedSearchObject instanceof Zug) {

                jLabelName.setText(jLabelText);
                // if-construction for not changing the Handtuch-Title
                if (tabIndex != 0) {
                    // changing the title of the tab
                    jTabbedPane1.setTitleAt(tabIndex, jLabelText);
                }
                // set content of jLvList
                jLVList.setModel(setLVZugList((Zug) selectedSearchObject));

            } else if (selectedSearchObject instanceof Dozent) {
                // changing the title of the tab

                jLabelName.setText(jLabelText);

                if (tabIndex != 0) {
                    // changing the title of the tabe
                    jTabbedPane1.setTitleAt(tabIndex, jLabelText);
                }

                // set content of jLvList
                jLVList.setModel(setLVDozentList((Dozent) selectedSearchObject));

            } else if (selectedSearchObject instanceof LV) {
                updateInfoPanel((LV) selectedSearchObject);
                // when directly selecting an LV in the List, open the list of the leading Zug and select the previous chosen LV      
                jLabelText = ((LV) selectedSearchObject).getLeadingZugName();

                jLabelName.setText(jLabelText);
                // if-construction for not changing the Handtuch-Title
                if (tabIndex != 0) {
                    // changing the title of the tab
                    jTabbedPane1.setTitleAt(tabIndex, jLabelText);
                }
                // set content of jLvList
                jLVList.setModel(setLVZugList(((LV) selectedSearchObject).getLeadingZug()));
                // when clicking on a LV as search result, automatically "click" on the same object in jLVList

                for (int i = 0; i <= jLVList.getLastVisibleIndex(); i++) {
                    String itemName = jLVList.getModel().getElementAt(i).toString();

                    if (itemName.contains(selectedSearchObject.toString())) {

                        jLVList.setSelectedIndex(i);
                        break;
                    }
                }
            }

            jLVList.revalidate();
            jLVList.repaint();
        }
    }//GEN-LAST:event_sucheListMouseClicked

    // action-listener for the radiobutton-click on "Dozenten"
    private void jRadioDozentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioDozentActionPerformed
        // switching flags to prevent the DoZuComboBox-action-listener from throwing an error
        this.radioButtonZugBoolean = false;
        this.radioButtonDozentBoolean = true;
        this.selectedSearchObject = null;
        // sets back jComboBox
        jComboDoZug.removeAllItems();
        updateDozentComboBox(dozentenList, jComboDoZug);
        // clears the Table
        DefaultTableCellRenderer();
    }//GEN-LAST:event_jRadioDozentActionPerformed

    private void jRadioZugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioZugActionPerformed
        // switching flags to prevent the DoZuComboBox-action-listener from throwing an error
        this.radioButtonDozentBoolean = false;
        this.radioButtonZugBoolean = true;
        this.selectedSearchObject = null;
        // sets back jComboBox
        jComboDoZug.removeAllItems();
        updateZugComboBox(this.zugList, jComboDoZug);
        jTable.revalidate();
        jTable.repaint();
        // clears the Table
        DefaultTableCellRenderer();
    }//GEN-LAST:event_jRadioZugActionPerformed

    // action-listener for deleting element in table when left-clicked
    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            int row = jTable.rowAtPoint(evt.getPoint());
            int col = jTable.columnAtPoint(evt.getPoint());

            // check if the click was inside a legitimate cell
            if (row >= 0 && col >= 1) {
                if (jTable.getValueAt(row, col) != null) {
                    Object cellValue = jTable.getValueAt(row, col);
                    System.out.println(cellValue);
                    String cellString = (String) cellValue;
                    String check = jLabelName.getText();
                    for (Dozent dozentTable : dozentenList) {
                        if (dozentTable.getName().equals(check)) {
                            for (LV lvDozentTable : dozentTable.getLV()) {
                                if (lvDozentTable.getName().equals(cellString)) {
                                    int checkSum = 33 - ((col) * 6) + (6 - row);
                                    long delete = 1;
                                    delete = delete << checkSum;
                                    lvDozentTable.setScheduledLV(lvDozentTable.getScheduledLV() ^ delete);
                                    dozentTable.setScheduledDozent(dozentTable.getScheduledDozent() ^ delete);
                                    lvDozentTable.substractOneSWSBlocksTook();
                                    jLVList.setCellRenderer(new CustomListCellRenderer(dozentTable.getLV(), lvDozentTable, dozentTable));
                                    jTable.setValueAt("", row, col);
                                    jLVList.setCellRenderer(new CustomListCellRenderer(dozentTable.getLV(), lvDozentTable, dozentTable));
                                    jTable.revalidate();
                                    jTable.repaint();
                                    getZugLVandDozentLVforSelectedLVinTable(lvDozentTable);
                                }
                            }

                        }
                    }

                    // Falls blackboaeder deletet werden soll HIER 채ndern
                    for (Zug zugTable : zugList) {
                        if (zugTable.getName().equals(check)) {
                            for (LV lvZugTable : zugTable.getLV()) {
                                if (lvZugTable.getName().equals(cellValue)) {
                                    int checkSum = 33 - ((col) * 6) + (6 - row);
                                    long delete = 1;
                                    delete = delete << checkSum;
                                    lvZugTable.setScheduledLV(lvZugTable.getScheduledLV() ^ delete);

                                    lvZugTable.getDozentLV().setScheduledDozent(lvZugTable.getDozentLV().getScheduledDozent() ^ delete);
                                    lvZugTable.substractOneSWSBlocksTook();
                                    jLVList.setCellRenderer(new CustomListCellRenderer(zugTable.getLV(), lvZugTable, zugTable));
                                    jTable.setValueAt("", row, col);
                                    jLVList.setCellRenderer(new CustomListCellRenderer(zugTable.getLV(), lvZugTable, zugTable));
                                    jTable.revalidate();
                                    jTable.repaint();
                                    getZugLVandDozentLVforSelectedLVinTable(lvZugTable);

                                }
                            }
                        }
                    }
                }
            }
        }
        jTabbedPane1.revalidate();
        jTabbedPane1.repaint();
        jTable.revalidate();
        jTable.repaint();
        jLVList.revalidate();
        jLVList.repaint();
    }//GEN-LAST:event_jTableMouseClicked

    // When combo box element is clicked
    // lv list gets filled with lv쨈s
    private void jComboDoZugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboDoZugActionPerformed
        if (jComboDoZug.getSelectedItem() != null) {
            DefaultTableCellRenderer();
            int tabIndex = jTabbedPane1.getSelectedIndex();
            String jLabelText = jComboDoZug.getSelectedItem().toString();
            jLabelName.setText(jLabelText);
            // if-construction for not changing the Handtuch-Title
            if (tabIndex != 0) {
                jTabbedPane1.setTitleAt(tabIndex, jLabelText);
            }

            if (radioButtonZugBoolean && !radioButtonDozentBoolean) {
                Zug zug = getObjectFromName(jComboDoZug.getSelectedItem().toString(), zugList);
                jLVList.setModel(setLVZugList(zug));
                jLVList.revalidate();
                jLVList.repaint();

            } else if (!radioButtonZugBoolean && radioButtonDozentBoolean) {
                Dozent dozent = getObjectFromName(jComboDoZug.getSelectedItem().toString(), dozentenList);
                jLVList.setModel(setLVDozentList(dozent));
                jLVList.revalidate();
                jLVList.repaint();
            }

        }
    }//GEN-LAST:event_jComboDoZugActionPerformed

    // Updates the infopanel
    private void updateInfoPanel(LV selectedLV) {
        lastSelectedLV = selectedLV;

        // clear InfoPanel for new input
        jInfoFeld.removeAll();
        Font font = new Font("Arial", Font.BOLD, 18);

        // the different labels are created here with the infos needed int the InfoPanel
        JLabel nameLabel = new JLabel("   Name: " + selectedLV.getFullName());
        nameLabel.setFont(font);
        JLabel dozentenLabel = new JLabel("   Dozent: " + selectedLV.getDozentName());
        dozentenLabel.setFont(font);
        JLabel zugNameLabel = new JLabel("   ZugList: " + selectedLV.getZugNameList());
        zugNameLabel.setFont(font);
        JLabel swsLabel = new JLabel("   SWS: " + selectedLV.getSWS() + "(" + ((selectedLV.getSWSBlocks() - selectedLV.getSWSBlocksTook()) * 2) + ")");
        swsLabel.setFont(font);
        JLabel raumLabel = new JLabel("   RaumNr: " + selectedLV.getRoomNumber());
        raumLabel.setFont(font);
        JLabel geblocktLabel = new JLabel("   Geblockt: " + selectedLV.getGeblockt());
        geblocktLabel.setFont(font);
        JLabel leadingLabel = new JLabel("   leading: " + selectedLV.getLeadingZugName());
        leadingLabel.setFont(font);
        JLabel lva = new JLabel("   LVA: " + selectedLV.getLVA());
        lva.setFont(font);
        JLabel nickName = new JLabel("   NickName: " + selectedLV.getNickName());
        nickName.setFont(font);

        jInfoFeld.setLayout(new GridLayout(0, 2));
        // Here the labels are added to the InfoPanel
        jInfoFeld.add(nameLabel);
        jInfoFeld.add(swsLabel);
        jInfoFeld.add(zugNameLabel);
        jInfoFeld.add(dozentenLabel);
        jInfoFeld.add(raumLabel);
        jInfoFeld.add(geblocktLabel);
        jInfoFeld.add(leadingLabel);
        jInfoFeld.add(lva);
        jInfoFeld.add(nickName);
        // we update the InfoPanel
        jInfoFeld.revalidate();
        jInfoFeld.repaint();
    }

    // action-listener for resizing the Table and correcting the rows-size in the Table
    private void jScrollPane3ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPane3ComponentResized
        jScrollPane3.getViewport().setViewSize(jTable.getPreferredSize());
        int rowCount = jTable.getRowCount();
        // normally the if statement is unnecessary, but just in case to prevent errors 
        if (rowCount > 0) {
            int newRowHeight = jScrollPane3.getViewport().getExtentSize().height / rowCount;
            jTable.setRowHeight(newRowHeight);
        }
    }//GEN-LAST:event_jScrollPane3ComponentResized
    
    // action listener to change the roomNr on button press
    private void changeRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRoomButtonActionPerformed
        changeRoom();
    }//GEN-LAST:event_changeRoomButtonActionPerformed
    // action listener to change the roomNr on 'Enter' press
    private void changeRoomFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRoomFieldActionPerformed
        changeRoom();
    }//GEN-LAST:event_changeRoomFieldActionPerformed
 
    // Assigns a roomnumber to the lv
    private void changeRoom(){
        String RaumNr = changeRoomField.getText();
        // makes sure to have a selecteLv and a valid RoomNr input
        if(RaumNr != null && lastSelectedLV != null && !RaumNr.equals("")){
            lastSelectedLV.setRoomNumber(RaumNr);
            updateInfoPanel(lastSelectedLV);
        }else{
            jDialog1.setLayout(new FlowLayout());
            // Automatically adjust the size of the dialog based on its contents
            jDialog1.pack(); 
            // Center the dialog relative to the parent frame
            jDialog1.setLocationRelativeTo(this);
            // shows pop-up window
            jDialog1.setVisible(true);
        }
    }

    // Sets LVDozentlist
    private DefaultListModel setLVDozentList(Dozent dozent) {

        emptyJTable();

        DefaultListModel<Object> listModel = new DefaultListModel<>();
        
        // checks if the search bar in use, so to not interrupt
        if (!jSuchfeldDoZug.getText().equals("Suche")) {
            dozent = getObjectFromName(jLabelName.getText(), dozentenList);
        }
        
        if (dozent != null) {

            tableTransferHandler.setObject(dozent);
            jLVList.updateUI();


            // Choose LV-Objekt Dozent
            tableTransferHandler.setDozentenName(dozent.getName());
            tableTransferHandler.setLVJLVList(dozent.getLV());
            
            // get LV-Object from Dozent
            for (LV dozentLV : dozent.getLV()) {
                setLVforJTable(dozentLV);
                jLVList.setCellRenderer(new CustomListCellRenderer(dozent.getLV(), dozentLV, dozent));
            }

            // Sets the renderer for preferred column (in this case 0)
            for (int i = 1; i < 7; i++) {
                jTable.getColumnModel().getColumn(i).setCellRenderer(tableCellRenderer);
            }
            for (LV lvElement : dozent.getLV()) {

                int swsUebrig = lvElement.getSWSBlocks() - lvElement.getSWSBlocksTook();
                listModel.addElement(lvElement + " " + swsUebrig);
            }
        }
        return listModel;
    }

    // Sets lvZugList
    private DefaultListModel setLVZugList(Zug zug) {

        emptyJTable();
        DefaultTableCellRenderer();

        DefaultListModel<Object> listModel = new DefaultListModel<>();

        if (!jSuchfeldDoZug.getText().equals("Suche")) {
            zug = getObjectFromName(jLabelName.getText(), zugList);

        }
        if (zug != null) {
            tableTransferHandler.setObject(zug);
            tableTransferHandler.setLVJLVList(zug.getLV());

            for (LV lvElement : zug.getLV()) {
                setLVforJTable(lvElement);
                jLVList.setCellRenderer(new CustomListCellRenderer(zug.getLV(), lvElement, zug));

                int swsUebrig = lvElement.getSWSBlocks() - lvElement.getSWSBlocksTook();
                listModel.addElement(lvElement + " " + swsUebrig);

            }

        }
        return listModel;
    }

    private <T> T getObjectFromName(String name, List<T> objectList) {
        T foundObject = null;
        for (T object : objectList) {
            if (object instanceof Dozent && ((Dozent) object).getName().equals(name)) {
                foundObject = object;
                break;
            } else if (object instanceof Zug && ((Zug) object).getName().equals(name)) {
                foundObject = object;
                break;
            }
        }
        return foundObject;
    }

    // method to interate through the Dozenten/Zug/LV-List to fetch all Objects that contains the input
    public void findMatchingObjects(String input) {

        DefaultListModel<Object> suchListModel = new DefaultListModel<>();
        try {
            for (Dozent dozentObj : dozentenList) {
                if (dozentObj.getName().toLowerCase().contains(input.toLowerCase())) {
                    suchListModel.addElement(dozentObj);
                }
            }

            for (Zug zugObj : zugList) {
                if (zugObj.getName().toLowerCase().contains(input.toLowerCase())) {
                    suchListModel.addElement(zugObj);
                }
            }

            for (LV lvObj : lvList) {
                if (lvObj.getName().toLowerCase().contains(input.toLowerCase())) {
                    suchListModel.addElement(lvObj);
                }
            }
            // adds matching objects to JList "sucheList"
            sucheList.setModel(suchListModel);
        } catch (java.lang.NullPointerException ex) {

        }
    }

    // Updates combobox with Dozent
    public void updateDozentComboBox(List<Dozent> dozentenListe, JComboBox<Object> comboBox) {
        // adds generic first entry
        comboBox.addItem("---------");
        // sorting the dozentenListe alphabetically 
        Collections.sort(dozentenListe, (Dozent dozent1, Dozent dozent2) -> dozent1.getName().compareTo(dozent2.getName()));
        // adds each element to the Combobox
        for (Dozent dozent : dozentenListe) {
            comboBox.addItem(dozent);
        }
    }

    // Updates combobox with Zug
    public void updateZugComboBox(List<Zug> zugListe, JComboBox<Object> comboBox) {
        // adds generic first entry
        comboBox.addItem("---------");
        // sorting the zugListe alphabetically 
        Collections.sort(zugListe, (Zug zug1, Zug zug2) -> zug1.getName().compareTo(zug2.getName()));
        // adds each element to the Combobox
        for (Zug zug : zugListe) {
            comboBox.addItem(zug);
        }
    }

    // method for clearing the entries in the Table
    public void emptyJTable() {
        for (int row = 0; row < 6; row++) {
            for (int col = 1; col < 7; col++) {
                jTable.setValueAt("", row, col); // Setzen Sie den Wert auf einen leeren String
            }
        }

    }

    // Adds selectionlistener to jLVList
    public void addSelectionListenerJLVList() {

        jLVList.addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {

                // Checks what element was chonsen. Decides if Zug or Dozent is put in jLVList
                if (!jLVList.isSelectionEmpty()) {

                    // Declare selectedLV
                    int selectedIndex = jLVList.getSelectedIndex();
                    jLVListLV = null;
                    // Checks which radiobutton is chosen
                    if (radioButtonZugBoolean || radioButtonDozentBoolean) {

                        int tabIndex = jTabbedPane1.getSelectedIndex();
                        String jLabelText = jComboDoZug.getSelectedItem().toString();

                        //Sets the Name in the top left corner of the Panel
                        jLabelName.setText(jLabelText);
                        // if-construction for not changing the Handtuch-Title
                        if (tabIndex != 0) {

                            jTabbedPane1.setTitleAt(tabIndex, jLabelText);
                        }

                        //The Radiobuttons decides wich variable radioButtonZugBoolean or radioButtonDozentBoolean is true respectively false
                        if (radioButtonZugBoolean && !radioButtonDozentBoolean) {

                            Zug selectedZug = getObjectFromName(jComboDoZug.getSelectedItem().toString(), zugList);
                            jLVListLV = selectedZug.getLV().get(selectedIndex); // LV-Objekt aus den Z체gen ausw채hlen
                            tableTransferHandler.setDozentenName(jLVListLV.getDozentName());
                        } else if (!radioButtonZugBoolean && radioButtonDozentBoolean) {

                            Dozent selectedDozent = getObjectFromName(jComboDoZug.getSelectedItem().toString(), dozentenList);
                            jLVListLV = selectedDozent.getLV().get(selectedIndex);

                        }
                    } else {
                        if (selectedSearchObject instanceof Zug) {
                            jLVListLV = ((Zug) selectedSearchObject).getLV().get(selectedIndex);
                            tableTransferHandler.setDozentenName(jLVListLV.getDozentName());
                            tableCellRenderer = new TableCellRenderer(((LV) jLVListLV).getDozentLV(), dozentenList, ((Zug) selectedSearchObject).getLV(), jLabelName.getText(), jLVListLV, zugList);
                        } else if (selectedSearchObject instanceof Dozent) {
                            jLVListLV = ((Dozent) selectedSearchObject).getLV().get(selectedIndex);
                            tableCellRenderer = new TableCellRenderer((Dozent) selectedSearchObject, dozentenList, ((Dozent) selectedSearchObject).getLV(), jLabelName.getText(), jLVListLV, zugList);
                        } else if (selectedSearchObject instanceof LV) {

                            jLVListLV = ((LV) selectedSearchObject).getLeadingZug().getLV().get(selectedIndex);
                            tableTransferHandler.setDozentenName(jLVListLV.getDozentName());
                            tableCellRenderer = new TableCellRenderer(((LV) jLVListLV).getDozentLV(), dozentenList, ((LV) selectedSearchObject).getLeadingZug().getLV(), jLabelName.getText(), jLVListLV, zugList);
                        }
                        lvSelected = jLVListLV;
                    }
                    // Check if selectedLV is null
                    if (jLVListLV != null) {
                        for (int i = 1; i < 7; i++) {
                            jTable.getColumnModel().getColumn(i).setCellRenderer(tableCellRenderer);
                        }
                        getZugLVandDozentLVforSelectedLVinTable(jLVListLV);

                        updateInfoPanel(jLVListLV);
                        jTable.revalidate();
                        jTable.repaint();
                    }
                }
            }
        });
    }

    public void getZugLVandDozentLVforSelectedLVinTable(LV selectedLV) {
        // When a LV is chosen (selectedLV) in the jLVList, it checks wich Zug also has to take selectedLV.
        // When checked it sets in jTable all LVs from all Zugs to display where it is NOT possible to place the selectedLV.
        // When done it checks wich Dozent is giving the selectedLV and displays(partly by overriting) all the LVs from this Dozent.

        emptyJTable();
        jTable.revalidate();
        jTable.repaint();
        //All LVs from all Zugs wich also has to take selectedLV
        getZugLVforSelectedLV(selectedLV);
        //All LVs from the Dozent giving the selectedLV
        getDozentLVforSelectedLV(selectedLV);
    }

    // Gets ZugLV and prints into table
    public void getZugLVforSelectedLV(LV selectedLV) {
        List<String> checkList = new ArrayList<>();
        for (Zug zug : selectedLV.getZugList()) {
            for (LV lvZug : zug.getLV()) {
                if (lvZug.getScheduledLV() != 0 && !checkList.contains(lvZug.getName())) {

                    long lvScheduled = lvZug.getScheduledLV();
                    for (int i = 39; i > 5; i--) {

                        if (lvScheduled % 2 == 1) {

                            int row = i % 6;
                            int column = i / 6;
                            String cellContent = "";
                            cellContent = (String) jTable.getValueAt(row, column);
                            cellContent += "  " + zug.getName() + ": " + lvZug.getName() + "  ";
                            checkList.add(lvZug.getName());
                            jTable.setValueAt(cellContent, row, column);
                            ((AbstractTableModel) jTable.getModel()).fireTableCellUpdated(row, column);
                        }
                        lvScheduled = lvScheduled >> 1;
                    }
                }
            }
        }
    }

    // Gets DozentLV and prints into table
    public void getDozentLVforSelectedLV(LV selectedLV) {

        for (LV lvDozent : selectedLV.getDozentLV().getLV()) {
            long lvScheduled = lvDozent.getScheduledLV();
            for (int i = 39; i > 5; i--) {

                if (lvScheduled % 2 == 1) {

                    int row = i % 6;
                    int column = i / 6;
                    String cellContent = "";

                    cellContent += lvDozent.getName();

                    jTable.setValueAt(cellContent, row, column);
                    ((AbstractTableModel) jTable.getModel()).fireTableCellUpdated(row, column);
                }
                lvScheduled = lvScheduled >> 1;
            }
        }
    }

    // Sets LV for Table
    public void setLVforJTable(LV lv) {

        if (lv.getScheduledLV() != 0) {

            long lvScheduled = lv.getScheduledLV();
            for (int i = 39; i > 5; i--) {
                if (lvScheduled % 2 == 1) {
                    int row = i % 6;
                    int column = i / 6;
                    String cellContent = "";

                    cellContent += lv.getName();

                    jTable.setValueAt(cellContent, row, column);
                    ((AbstractTableModel) jTable.getModel()).fireTableCellUpdated(row, column);

                }
                lvScheduled = lvScheduled >> 1;

            }
        }

    }

    // Sets the renderer for every row and column
    public void DefaultTableCellRenderer() {
        DefaultTableCellRenderer defaultRenderer = new DefaultTableCellRenderer();
        for (int i = 1; i < jTable.getColumnCount(); i++) {
            jTable.getColumnModel().getColumn(i).setCellRenderer(defaultRenderer);
        }
    }

    public void getZugforLVinTable(LV lv) {
        emptyJTable();
        jTable.revalidate();
        jTable.repaint();
        List<String> checkList = new ArrayList<>();
        for (Zug zug : lv.getZugList()) {
            for (LV lvZug : zug.getLV()) {
                if (lvZug.getScheduledLV() != 0 && !checkList.contains(lvZug.getName())) {

                    long lvScheduled = lvZug.getScheduledLV();
                    for (int i = 39; i > 5; i--) {
                        if (lvScheduled % 2 == 1) {
                            int row = i % 6;
                            int column = i / 6;
                            String cellContent = "";
                            cellContent = (String) jTable.getValueAt(row, column);
                            cellContent += "   " + zug.getName() + ": " + lvZug.getName() + "   ";
                            checkList.add(lvZug.getName());

                            jTable.setValueAt(cellContent, row, column);
                            ((AbstractTableModel) jTable.getModel()).fireTableCellUpdated(row, column);
                        }
                        lvScheduled = lvScheduled >> 1;
                    }
                }
            }
        }
        for (LV lvDozent : lv.getDozentLV().getLV()) {
            long lvScheduled = lvDozent.getScheduledLV();
            for (int i = 39; i > 5; i--) {
                if (lvScheduled % 2 == 1) {
                    int row = i % 6;
                    int column = i / 6;
                    String cellContent = "";
                    cellContent += lvDozent.getName();
                    jTable.setValueAt(cellContent, row, column);
                    ((AbstractTableModel) jTable.getModel()).fireTableCellUpdated(row, column);
                }
                lvScheduled = lvScheduled >> 1;
            }
        }
    }

    public void setImport(List<LV> lvList, List<Dozent> dozentList, List<Zug> zugList) {
        this.lvList = lvList;
        this.dozentenList = dozentList;
        this.zugList = zugList;

    }

    public JTable getJTable() {
        return jTable;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton changeRoomButton;
    private javax.swing.JTextField changeRoomField;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JComboBox<Object> jComboDoZug;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JPanel jInfoFeld;
    private javax.swing.JList<Object> jLVList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JRadioButton jRadioDozent;
    private javax.swing.JRadioButton jRadioZug;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jSuchfeldDoZug;
    private javax.swing.JTable jTable;
    private javax.swing.JTree jTree1;
    private javax.swing.JList<Object> sucheList;
    // End of variables declaration//GEN-END:variables
}
